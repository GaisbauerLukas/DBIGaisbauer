return(FALSE)
}
BiSearch(table[(m + 1L):r], key)
}
else {
return(TRUE)
}
}
BiSearch(c(1,2,3,4,5), 5)
BiSearch(c(1,2,3,4,5), 8)
BiSearch(c(1,2,3,4,5), 2)
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
return(FALSE)
}
BiSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
return (FALSE)
}
BiSearch(vector[(m + 1L):r], needele)
}
else {
return (TRUE)
}
}
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
return(FALSE)
}
func.biSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
return (FALSE)
}
func.biSearch(vector[(m + 1L):r], needele)
}
else {
return (TRUE)
}
}
func.biSearch(c(1,2,3,4,5), 5)
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
FALSE
}
func.biSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
FALSE
}
func.biSearch(vector[(m + 1L):r], needele)
}
else {
TRUE
}
}
func.biSearch(c(1,2,3,4,5), 5)
func.biSearch(c(1,2,3,4,5), 2)
func.biSearch(c(1,2,3,4,5), 8)
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
(FALSE)
}
func.biSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
(FALSE)
}
func.biSearch(vector[(m + 1L):r], needele)
}
else {
TRUE
}
}
func.biSearch(c(1,2,3,4,5), 8)
func.biSearch(c(1,2,3,4,5), 8)
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
return (FALSE)
}
func.biSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
return (FALSE)
}
func.biSearch(vector[(m + 1L):r], needele)
}
else {
TRUE
}
}
func.biSearch <- function(vector, needele) {
stopifnot(is.vector(vector), is.numeric(vector), is.numeric(needele))
r <- length(vector)
#Gibt den Mittelpunkt zurück
m <- ceiling(r / 2L)
if (vector[m] > needele) {
if (r == 1L) {
return (FALSE)
}
func.biSearch(vector[1L:(m - 1L)], needele)
}
else if (vector[m] < needele) {
if (r == 1L) {
return (FALSE)
}
func.biSearch(vector[(m + 1L):r], needele)
}
else {
TRUE
}
}
func.biSearch(c(1,2,3,4,5), 8)
func.biSearch(c(1,2,3,4,5), 2)
func.biSearch(c(1,2,3,4,5), 1)
func.biSearch(c(1,2,3,4,5), 5)
func.biSearch(c(1,2,3,4,5), 19)
func.biSearch(c(1,2,3,4,5), 24)
help(cbind)
a <- c(1,2,3)
b <- c(4,5,6)
cbind(a,b)
a <- c(1,2,3)
b <- c(4,5,6)
rbind(a,b)
matrix([1:9], nrow = rows, ncol = cols)
matrix((1:9), nrow = rows, ncol = cols)
matrix((1:9), nrow = 3, ncol = 3)
#2
mat <- matrix((1:9), nrow = 3, ncol = 3)
#3
is.matrix(mat)
mat2 <- matrix((1:25), nrow = 5, ncol = 5)
mat2 <- matrix((1:25), nrow = 5, ncol = 5)
mat2
mat2 <- matrix((1:25), nrow = 5, ncol = 5, byrow = TRUE)
mat2
mat2[(2:3),(2:3)]
mat2[(4:5),(4:5)]
sum(mat2)
help(runif)
matrix(runif(20,0,100), nrow = 4, ncol = 5)
matrix(as.integer(runif(20,0,100)), nrow = 4, ncol = 5)
mtcars
is.data.frame(mtcars)
as.data.frame(matrix((1:25), nrow =5)
)
mtcars[,6]
mtcars[6,]
mtcars[6]
mtcars[6,*]
head(mtcars)
Age <- c(22,25,26)
Weight <- c(150,165,120)
Sex <- c("M","M","F")
data.frame(Age,Weight,Sex, row.names = c("Sam","Frank","Amy"))
avg(mtcars["mpg"])
avg(mtcars("mpg"))
help("mean")
mean(c(1,2,3))
mean(mtcars("mpg"))
mean(mtcars["mpg"])
mtcars[,6]
mean(mtcars[,"mpg"])
mean(mtcars$"mpg")
subset(mtcars, subset = cyl == 6)
mtcars[,c("am","gear","carb")]
help("apply")
help <-  apply(mtcars,1,hp/wt)
mtcars$performance <- apply(mtcars,1,hp/wt)
mtcars$performance <- apply(mtcars,1,mtcars[hp]/mtcars[wt])
mtcars[["performance"]] <- mtcars$hp/mtcars$wt
mtcars
help("round")
mtcars[["performance"]] <- round(mtcars$hp/mtcars$wt,2)
mtcars
mean((subset(mtcars, subset = hp > 100 && wt>2.5))$"mpg")
(subset(mtcars, subset = hp > 100 && wt>2.5)
subset(mtcars, subset = hp > 100 && wt>2.5)
subset(mtcars, subset = hp > 100 && wt>2.5)
subset(mtcars, subset = (hp > 100 && wt>2.5))
subset(subset(mtcars, subset = hp > 100), subset = wt > 2.5)
mean((subset(subset(mtcars, subset = hp > 100), subset = wt > 2.5))$"mpg")
mtcars["Hornet Sportabout", "mpg"]
subset(df, subset = df$volunteer == TRUE)
setwd("/home/lukas/Documents/repos/DBI/Repo/DBIGaisbauer/R Programing/Basics/Exercise4")
df <- data.frame(read.csv("volunteers.csv"))
df
df$isVolunteer <- df[,"volunteer"] == 'yes'
df
df[,"volunteer"] <- NULL
df
colnames(df)["isVolunteer"] <- "volunteer"
df
colnames(df)["isVolunteer"] <- "volunteer"
colnames(df)[5] <- "volunteer"
colnames(df)[,"isVolunteer"] <- "volunteer"
colnames(df)
df <- data.frame(read.csv("volunteers.csv"))
df$isVolunteer <- df[,"volunteer"] == 'yes'
df
df[,"volunteer"] <- NULL
colnames(df)["isVolunteer"] <- "volunteer"
colnames(df)["isVolunteer"] <- "volunteer"
df
colnames(df)
df <- data.frame(read.csv("volunteers.csv"))
df
df$isVolunteer <- df[,5] == 'yes'
df[,5] <- NULL
colnames(df)[5] <- "volunteer"
df <- data.frame(read.csv("volunteers.csv"))
df
df$isVolunteer <- df[,"volunteer"] == 'yes'
df
df[,"volunteer"] <- NULL
df
colnames(df)["isVolunteer"] <- "volunteer"
colnames(df)[5] <- "volunteer"
#1
df <- data.frame(read.csv("volunteers.csv"))
df
#2
df$isVolunteer <- df[,"volunteer"] == 'yes'
df
#3
df[,"volunteer"] <- NULL
df
colnames(df)
df$factorDiff <- abs(df$neuroticism-df$extraversion)
df
subset(df, subset = df$volunteer == TRUE)
setwd("/home/lukas/Documents/repos/DBI/Repo/DBIGaisbauer/R Programing/Basics/Exercise4")
#1
df <- data.frame(read.csv("volunteers.csv"))
df
#2
df$isVolunteer <- df[,"volunteer"] == 'yes'
df
#3
df[,"volunteer"] <- NULL
df
#4
colnames(df)[5] <- "volunteer"
df
#5
df$factorDiff <- abs(df$neuroticism-df$extraversion)
df
subset(df, subset = df$volunteer == TRUE)
subset(df, subset = df$volunteer == FALSE & df$ sex == "male")
round(((nrow(subset(df, subset = df$sex == "female" & df$volunteer == TRUE)))/(nrow(subset(df, subset = df$sex == "female"))))*100,0) #45%
unsuitedPeople <- subset(df, subset = df$neuroticism>12 | df$extraversion < 10 | df$factorDiff > 15)
unsuitedPeople
round(nrow(subset(unsuitedPeople,subset= unsuitedPeople$volunteer == TRUE))/nrow(unsuitedPeople),4) #0.4086
suitedPeople <- df[!df$X %in% unsuitedPeople$X,]
mean(subset(suitedPeople,subset = suitedPeople$volunteer==FALSE)$factorDiff) #5.636872
library(xlsx)
write.xlsx(df, "volunteers.xlsx",sheetName = "VolDat")
install.packages("RODBC")
library(RODBC)
library(DBI)
install.packages('DBI',repos="http://cran.rstudio.com/")
library(DBI)
library(DBI)
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
con <- dbConnect(
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
install.packages('RODBC',repos="http://cran.rstudio.com/")
library(DBI)
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
install.packages('odbc',repos="http://cran.rstudio.com/")
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
library(odbc)
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
con <- dbConnect(
odbc::odbc(),
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
posdriver <−dbDriver(’PostgreSQL’)
con <- dbConnect(
odbc::odbc(),
driver = posdriver,
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
posdriver <−dbDriver(’PostgreSQL’)
posdriver<-dbDriver(’PostgreSQL’)
posdriver<-dbDriver('PostgreSQL')
#install.packages('RPostgreSQL', repos="http://cran.rstudio.com/")
install.packages('RPostgreSQL', repos="http://cran.rstudio.com/")
install.packages('RPostgreSQL', repos="http://cran.rstudio.com/")
library(DBI)
library(odbc)
posdriver<-dbDriver('PostgreSQL')
con <- dbConnect(
odbc::odbc(),
driver = posdriver,
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
library(DBI)
library(odbc)
con <- dbConnect(
odbc::odbc(),
driver = "PostgreSQL Unicode(x64)",
Server = "130.61.88.14",
Database = "minneapolis_traffic",
UID = "police_data_scuentist",
PWD = "Str0ngAndS3cure",
Port = 5432
)
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = police_data_scuentist,
password = Str0ngAndS3cure,
Port = 5432
)
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = police_data_scuentist,
password = Str0ngAndS3cure
)
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = police_data_scientist,
password = Str0ngAndS3cure
)
library(RPostgreSQL)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = "police_data_scientist",
password = "Str0ngAndS3cure"
)
dat <- sqlFetch(con)
dbListTables(con)
dat <- dbFetch(con, "traffic_stops")
dat <- dbReadTable(con, "traffic_stops")
dat <- dbReadTable(con, traffic_stops)
dbListTables(con)
dat <- dbReadTable(con, "traffic_stops")
dbListTables(con)
dat <- dbReadTable(con, "traffic_stops")
dat <- dbGetQuery(con, 'SELECT * FROM traffic_stops')
dbListTables(con)
dbGetQuery(con, 'SELECT * FROM traffic_stops')
dat <- dbGetQuery(con, 'SELECT * FROM police_stops.traffic_stops')
dat
dat <- dbReadTable(con, 'police_stops.traffic_stops')
dat
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = rstudioapi::askForPassword("User"), #police_data_scientist
password = rstudioapi::askForPassword("Password!"))) #Str0ngAndS3cure
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = rstudioapi::askForPassword("User"), #police_data_scientist
password = rstudioapi::askForPassword("Password!")) #Str0ngAndS3cure
#install.packages('rstudioapi', repos="http://cran.rstudio.com/")
install.packages('rstudioapi', repos="http://cran.rstudio.com/")
library(RPostgreSQL)
library(rstudioapi)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = rstudioapi::askForPassword("User"), #police_data_scientist
password = rstudioapi::askForPassword("Password!")) #Str0ngAndS3cure
dbListTables(con)
con <- dbConnect(dbDriver("PostgreSQL"),
dbname   = "minneapolis_traffic",
host     = "130.61.88.14",
port     = 5432,
user     = "police_data_scientist",
password = rstudioapi::askForPassword("Password!"))
dat
nrow(subset(dat,subset = dat$person_search == TRUE & dat$neighborhood == "Downtown West"))
nrow(dbGetQuery(con, "select * from police_stops.traffic_stops
where person_search = TRUE and neighborhood = 'Downtown West';"))
nrow(dbGetQuery(con, "SELECT * FROM police_stops.traffic_stops WHERE person_search = TRUE and neighborhood = 'Downtown West'"))
dbGetQuery(conn, "SELECT race, COUNT(*) FROM police_stops.traffic_stops WHERE race != 'NA' and problem = 'suspicious' group by race")
dbGetQuery(con, "SELECT race, COUNT(*) FROM police_stops.traffic_stops WHERE race != 'NA' and problem = 'suspicious' group by race")
amount_suspicious <- nrow(dbGetQuery(con, "select * from police_stops.traffic_stops where problem = 'suspicious'"))
amount_traffic <- nrow(dbGetQuery(con, "select * from police_stops.traffic_stops where problem = 'traffic'"))
if(amount_suspicious > amount_traffic){
print('suspicious')
}else{
print('traffic')
}
max(c(2,3))
nrow(subset(dat,dat$problem == "suspicious"))
suspicious <- nrow(subset(dat,dat$problem == "suspicious"))
traffic <- nrow(subset(dat,dat$problem == "traffic"))
if(suspicious > traffic){
print('stops for suspicious are more commen')
}else{
print('stops for traffic are more commen')
}
suspicious <- nrow(dbGetQuery(con, "SELECT * FROM police_stops.traffic_stops WHERE problem = 'suspicious'"))
traffic <- nrow(dbGetQuery(con, "SELECT * FROM police_stops.traffic_stops WHERE problem = 'traffic'"))
if(suspicious > traffic){
print('stops for suspicious are more commen')
}else{
print('stops for traffic are more commen')
}
if(suspicious > traffic){
print('stops for suspicious are more commen')
}else{
print('stops for traffic are more commen')
}
